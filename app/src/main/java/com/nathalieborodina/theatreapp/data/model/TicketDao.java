package com.nathalieborodina.theatreapp.data.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nathalieborodina.theatreapp.data.model.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TICKET".
*/
public class TicketDao extends AbstractDao<Ticket, Long> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TicketId = new Property(1, Long.class, "ticketId", false, "TICKET_ID");
        public final static Property EventId = new Property(2, Long.class, "eventId", false, "EVENT_ID");
        public final static Property Row = new Property(3, Integer.class, "row", false, "ROW");
        public final static Property Seat = new Property(4, Integer.class, "seat", false, "SEAT");
        public final static Property CustomerId = new Property(5, Long.class, "customerId", false, "CUSTOMER_ID");
        public final static Property FirstName = new Property(6, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(7, String.class, "lastName", false, "LAST_NAME");
    };


    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TICKET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TICKET_ID\" INTEGER," + // 1: ticketId
                "\"EVENT_ID\" INTEGER," + // 2: eventId
                "\"ROW\" INTEGER," + // 3: row
                "\"SEAT\" INTEGER," + // 4: seat
                "\"CUSTOMER_ID\" INTEGER," + // 5: customerId
                "\"FIRST_NAME\" TEXT," + // 6: firstName
                "\"LAST_NAME\" TEXT);"); // 7: lastName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TICKET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ticketId = entity.getTicketId();
        if (ticketId != null) {
            stmt.bindLong(2, ticketId);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(3, eventId);
        }
 
        Integer row = entity.getRow();
        if (row != null) {
            stmt.bindLong(4, row);
        }
 
        Integer seat = entity.getSeat();
        if (seat != null) {
            stmt.bindLong(5, seat);
        }
 
        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(6, customerId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(7, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(8, lastName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ticketId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // eventId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // row
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // seat
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // customerId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // firstName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // lastName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTicketId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEventId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRow(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSeat(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCustomerId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFirstName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ticket entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ticket entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
